apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: prometheus-adapter
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "7"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  destination:
    server: https://kubernetes.default.svc
    namespace: prometheus-adapter
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
  ignoreDifferences:
  - group: cert-manager.io
    kind: Certificate
    jsonPointers:
    - /spec/duration
  - group: apiregistration.k8s.io
    kind: APIService
    jsonPointers:
    - /spec/insecureSkipTLSVerify
  source:
    repoURL: https://prometheus-community.github.io/helm-charts
    chart: prometheus-adapter
    targetRevision: 2.13.0
    helm:
      version: v3
      values: |
        image:
          repository: quay.io/cybozu/prometheus-adapter
          tag: 0.8.4.1
          pullPolicy: IfNotPresent
        
        # Url to access prometheus
        prometheus:
          url: http://vmselect-vmcluster-largeset.monitoring.svc
          port: 8481
          path: "/select/0/prometheus"
        
        replicas: 2
        
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
        
        rules:
          default: false
          custom:
            - seriesQuery: '{__name__=~"^container_.*",container!="POD",namespace!="",pod!=""}'
              seriesFilters: []
              resources:
                overrides:
                  namespace:
                    resource: namespace
                  pod:
                    resource: pod
              name:
                matches: ^container_(.*)_seconds_total$
                as: ""
              metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>,container!="POD"}[5m]))
                by (<<.GroupBy>>)
            - seriesQuery: '{__name__=~"^container_.*",container!="POD",namespace!="",pod!=""}'
              seriesFilters:
              - isNot: ^container_.*_seconds_total$
              resources:
                overrides:
                  namespace:
                    resource: namespace
                  pod:
                    resource: pod
              name:
                matches: ^container_(.*)_total$
                as: ""
              metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>,container!="POD"}[5m]))
                by (<<.GroupBy>>)
            - seriesQuery: '{__name__=~"^container_.*",container!="POD",namespace!="",pod!=""}'
              seriesFilters:
              - isNot: ^container_.*_total$
              resources:
                overrides:
                  namespace:
                    resource: namespace
                  pod:
                    resource: pod
              name:
                matches: ^container_(.*)$
                as: ""
              metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>,container!="POD"}) by (<<.GroupBy>>)

            # this is used for e2e test...
            - seriesQuery: '{namespace="dctest",__name__=~"^test_hpa_.*"}'
              seriesFilters: []
              resources:
                template: <<.Resource>>
              name:
                matches: ""
                as: ""
              metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>}) by (<<.GroupBy>>)

          resource:
            cpu:
              containerQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>}[3m])) by (<<.GroupBy>>)
              nodeQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>, id='/'}[3m])) by (<<.GroupBy>>)
              resources:
                overrides:
                  instance:
                    resource: node
                  namespace:
                    resource: namespace
                  pod:
                    resource: pod
              containerLabel: container
            memory:
              containerQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>}) by (<<.GroupBy>>)
              nodeQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>,id='/'}) by (<<.GroupBy>>)
              resources:
                overrides:
                  instance:
                    resource: node
                  namespace:
                    resource: namespace
                  pod:
                    resource: pod
              containerLabel: container
            window: 3m
        
        podDisruptionBudget:
          # Specifies if PodDisruptionBudget should be enabled
          # When enabled, minAvailable or maxUnavailable should also be defined.
          enabled: true
          minAvailable:
          maxUnavailable: 1
        
        certManager:
          enabled: true
          caCertDuration: 438000h
          certDuration: 87600h
